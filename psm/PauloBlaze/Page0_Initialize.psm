; EMACS settings: -*-  tab-width: 2; indent-tabs-mode: t -*-
; vim: tabstop=2:shiftwidth=2:noexpandtab
; kate: tab-width 2; replace-tabs off; indent-width 2;
; 
; ==============================================================================
; Authors:					Patrick Lehmann
; 
; Assembler-Code:		SoFPGA initialisation routines
;
; Description:
; ------------------------------------
;		TODO
;		
;
; License:
; ==============================================================================
; Copyright 2007-2015 Patrick Lehmann - Dresden, Germany
; 
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
; 
;		http://www.apache.org/licenses/LICENSE-2.0
; 
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
; ==============================================================================
;
; ==============================================================================
; initialisation routine
; ==============================================================================
;PRAGMA function __Initialize begin
__Initialize:											; send banner to UART
	_Init_Messages:									LOAD			REG_PTR_L,	UART_SENDMSG_SOFPGA_BANNER
																	CALL			__Pager_Page1_Call_Table2
																	;
																	; measure changed clock
;																	LOAD			REG_PTR_L,	SENDMSG_FreqM_Measure
;																	CALL			__Pager_Page1_Call_Table1
;																	CALL			__MeasureClock
;																	LOAD			REG_PTR_L,	SENDMSG_FreqM_MHz
;																	CALL			__Pager_Page1_Call_Table1
;																	CALL			__UART_WriteNewline
																	;
																	; print ChipScope message
	_Init_ChipScope:								LOAD			REG_PTR_L,	UART_SENDMSG_SOFPGA_ARM_CHIPSCOPE
																	CALL			__Pager_Page1_Call_Table2
																	; print time
																	LOAD			REG_ARG_0,		" "
																	LOAD			REG_ARG_1,		"5"
		_Init_ChipScope_Loop:					CALL			__UART_WriteDoubleChar
																	CALL			__Sleep_1_s									; sleep 1 s
																	SUB				REG_ARG_1,		1'd
																	COMPARE		REG_ARG_1,		"0"
																	JUMP	NZ,	_Init_ChipScope_Loop
																	CALL			__UART_WriteNewline
																	;
																	JUMP			__Main
;PRAGMA function end
;
