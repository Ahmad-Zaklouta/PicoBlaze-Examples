; EMACS settings: -*-  tab-width: 2; indent-tabs-mode: t -*-
; vim: tabstop=2:shiftwidth=2:noexpandtab
; kate: tab-width 2; replace-tabs off; indent-width 2;
; 
; ==============================================================================
; Authors:					Patrick Lehmann
; 
; Assembler-Code:		TODO
;
; Description:
; ------------------------------------
;		TODO
;		
;
; License:
; ==============================================================================
; Copyright 2007-2015	Technische Universitaet Dresden - Germany,
; 
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
; 
;		http://www.apache.org/licenses/LICENSE-2.0
; 
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
; ==============================================================================
;
;
;
; ==============================================================================
; Main Menu
; ==============================================================================
;PRAGMA function _MainMenu_Switch begin
__MenuMain_Switch:								; ignore CarriageReturn and NewLine (LineFeed)
																	COMPARE		REG_ARG_0,	CR
																	JUMP	Z,	__MenuMain_wo_Prompt
																	COMPARE		REG_ARG_0,	LF
																	JUMP	Z,	__MenuMain_wo_Prompt
																	;
																	; immediately return input char (command)
																	LOAD			REG_ARG_1,	LF
																	CALL			__UART_WriteDoubleChar
																	;
																	COMPARE		REG_ARG_0,	"h"
																	JUMP	Z,	__MenuMain_ShortHelp
																	COMPARE		REG_ARG_0,	"H"
																	JUMP	Z,	__MenuMain_LongHelp
																	COMPARE		REG_ARG_0,	"c"
																	JUMP	Z,	__MenuMain_ClearScreen
																	COMPARE		REG_ARG_0,	"R"
																	JUMP	Z,	__MenuMain_SoFPGA_Reboot
																	;
																	COMPARE		REG_ARG_0,	"m"
																	JUMP	Z,	__MenuMain_MeasureClock
																	;
																	JUMP			__MenuMain_UnknownCommand
																	
__MenuMain_w_Prompt:							LOAD			REG_PTR_L,	UART_SENDMSG_SOFPGA_PROMPT
																	CALL			__Pager_Page1_Call_Table2
__MenuMain_wo_Prompt:							RETURN
;
; ==============================================================================
;
__MenuMain_UnknownCommand:				LOAD			REG_PTR_L,	UART_SENDMSG_SOFPGA_UNKNOWN_COMMAND
																	CALL			__Pager_Page1_Call_Table2
																	JUMP			__MenuMain_w_Prompt
																	;
__MenuMain_SoFPGA_Reboot:					LOAD			REG_PTR_L,	UART_SENDMSG_SOFPGA_REBOOT
																	CALL			__Pager_Page1_Call_Table2
																	CALL			__Sleep_1_s
																	JUMP			__Reboot
																	;
__MenuMain_ShortHelp:							LOAD			REG_PTR_L,	UART_SENDMSG_SOFPGA_HELP_CMD_SHORT
																	CALL			__Pager_Page1_Call_Table2
																	JUMP			__MenuMain_w_Prompt
																	;
__MenuMain_LongHelp:							LOAD			REG_PTR_L,	UART_SENDMSG_SOFPGA_HELP_CMD_LONG
																	CALL			__Pager_Page1_Call_Table2
																	JUMP			__MenuMain_w_Prompt
																	;
__MenuMain_ClearScreen:						CALL			__dev_Term_ClearScreen_All
																	JUMP			__MenuMain_w_Prompt
																	;
__MenuMain_MeasureClock:					LOAD			REG_PTR_L,	SENDMSG_FreqM_Measure
																	CALL			__Pager_Page1_Call_Table1
																	CALL			__MeasureClock
																	LOAD			REG_PTR_L,	SENDMSG_FreqM_MHz
																	CALL			__Pager_Page1_Call_Table1
																	CALL			__UART_WriteNewline
																	JUMP			__MenuMain_w_Prompt
																	;
															
__MenuMain_Exit:									CALL			__Sleep_1_ms									;
																	CALL			__UART_DisableRaw							; disable raw UART interface
																	;
																	JUMP			__End
																	;
;PRAGMA function end
;



; iÂ²c debugging
															; print I2C device map (after switching)
															;CALL			__IO_IIC_Scan_DeviceMap
															;CALL			__UART_WriteNewline
															;
															; print register map of the SI570 (before recall)
															;LOAD			REG_ARG_0,	IICBUS_SI570_ADDRESS
															;CALL			__IO_IIC_Dump_RegMap
															;CALL			__UART_WriteNewline
